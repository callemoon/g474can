
cantest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002838  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a30  08002a30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a30  08002a30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a30  08002a30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a30  08002a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002a44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002a44  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009eaf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000155d  00000000  00000000  00029eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e0  00000000  00000000  0002b448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000828  00000000  00000000  0002bd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024376  00000000  00000000  0002c550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000068c5  00000000  00000000  000508c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6564  00000000  00000000  0005718b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d6ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023ac  00000000  00000000  0013d76c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080029f8 	.word	0x080029f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080029f8 	.word	0x080029f8

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f938 	bl	8000498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f002 fab7 	bl	80027ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f944 	bl	80004fe <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f000 f910 	bl	80004ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000008 	.word	0x20000008
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000028 	.word	0x20000028
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028

080002f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f003 0307 	and.w	r3, r3, #7
 8000306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <__NVIC_SetPriorityGrouping+0x44>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000314:	4013      	ands	r3, r2
 8000316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800032a:	4a04      	ldr	r2, [pc, #16]	; (800033c <__NVIC_SetPriorityGrouping+0x44>)
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	60d3      	str	r3, [r2, #12]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <__NVIC_GetPriorityGrouping+0x18>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	0a1b      	lsrs	r3, r3, #8
 800034a:	f003 0307 	and.w	r3, r3, #7
}
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	2b00      	cmp	r3, #0
 800036c:	db0b      	blt.n	8000386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	f003 021f 	and.w	r2, r3, #31
 8000374:	4907      	ldr	r1, [pc, #28]	; (8000394 <__NVIC_EnableIRQ+0x38>)
 8000376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037a:	095b      	lsrs	r3, r3, #5
 800037c:	2001      	movs	r0, #1
 800037e:	fa00 f202 	lsl.w	r2, r0, r2
 8000382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000e100 	.word	0xe000e100

08000398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	db0a      	blt.n	80003c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	490c      	ldr	r1, [pc, #48]	; (80003e4 <__NVIC_SetPriority+0x4c>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	0112      	lsls	r2, r2, #4
 80003b8:	b2d2      	uxtb	r2, r2
 80003ba:	440b      	add	r3, r1
 80003bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c0:	e00a      	b.n	80003d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4908      	ldr	r1, [pc, #32]	; (80003e8 <__NVIC_SetPriority+0x50>)
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	f003 030f 	and.w	r3, r3, #15
 80003ce:	3b04      	subs	r3, #4
 80003d0:	0112      	lsls	r2, r2, #4
 80003d2:	b2d2      	uxtb	r2, r2
 80003d4:	440b      	add	r3, r1
 80003d6:	761a      	strb	r2, [r3, #24]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000e100 	.word	0xe000e100
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f003 0307 	and.w	r3, r3, #7
 80003fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000400:	69fb      	ldr	r3, [r7, #28]
 8000402:	f1c3 0307 	rsb	r3, r3, #7
 8000406:	2b04      	cmp	r3, #4
 8000408:	bf28      	it	cs
 800040a:	2304      	movcs	r3, #4
 800040c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	3304      	adds	r3, #4
 8000412:	2b06      	cmp	r3, #6
 8000414:	d902      	bls.n	800041c <NVIC_EncodePriority+0x30>
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3b03      	subs	r3, #3
 800041a:	e000      	b.n	800041e <NVIC_EncodePriority+0x32>
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000420:	f04f 32ff 	mov.w	r2, #4294967295
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	43da      	mvns	r2, r3
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	401a      	ands	r2, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000434:	f04f 31ff 	mov.w	r1, #4294967295
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	fa01 f303 	lsl.w	r3, r1, r3
 800043e:	43d9      	mvns	r1, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000444:	4313      	orrs	r3, r2
         );
}
 8000446:	4618      	mov	r0, r3
 8000448:	3724      	adds	r7, #36	; 0x24
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000464:	d301      	bcc.n	800046a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000466:	2301      	movs	r3, #1
 8000468:	e00f      	b.n	800048a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <SysTick_Config+0x40>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3b01      	subs	r3, #1
 8000470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000472:	210f      	movs	r1, #15
 8000474:	f04f 30ff 	mov.w	r0, #4294967295
 8000478:	f7ff ff8e 	bl	8000398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <SysTick_Config+0x40>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SysTick_Config+0x40>)
 8000484:	2207      	movs	r2, #7
 8000486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	e000e010 	.word	0xe000e010

08000498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f7ff ff29 	bl	80002f8 <__NVIC_SetPriorityGrouping>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b086      	sub	sp, #24
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	4603      	mov	r3, r0
 80004b6:	60b9      	str	r1, [r7, #8]
 80004b8:	607a      	str	r2, [r7, #4]
 80004ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004bc:	f7ff ff40 	bl	8000340 <__NVIC_GetPriorityGrouping>
 80004c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	68b9      	ldr	r1, [r7, #8]
 80004c6:	6978      	ldr	r0, [r7, #20]
 80004c8:	f7ff ff90 	bl	80003ec <NVIC_EncodePriority>
 80004cc:	4602      	mov	r2, r0
 80004ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ff5f 	bl	8000398 <__NVIC_SetPriority>
}
 80004da:	bf00      	nop
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff33 	bl	800035c <__NVIC_EnableIRQ>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffa4 	bl	8000454 <SysTick_Config>
 800050c:	4603      	mov	r3, r0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d101      	bne.n	800052a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
 8000528:	e194      	b.n	8000854 <HAL_FDCAN_Init+0x33c>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d136      	bne.n	80005a4 <HAL_FDCAN_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Reset callbacks to legacy functions */
    hfdcan->TxEventFifoCallback         = HAL_FDCAN_TxEventFifoCallback;         /* Legacy weak TxEventFifoCallback         */
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a8d      	ldr	r2, [pc, #564]	; (8000778 <HAL_FDCAN_Init+0x260>)
 8000542:	665a      	str	r2, [r3, #100]	; 0x64
    hfdcan->RxFifo0Callback             = HAL_FDCAN_RxFifo0Callback;             /* Legacy weak RxFifo0Callback             */
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a8d      	ldr	r2, [pc, #564]	; (800077c <HAL_FDCAN_Init+0x264>)
 8000548:	669a      	str	r2, [r3, #104]	; 0x68
    hfdcan->RxFifo1Callback             = HAL_FDCAN_RxFifo1Callback;             /* Legacy weak RxFifo1Callback             */
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a8c      	ldr	r2, [pc, #560]	; (8000780 <HAL_FDCAN_Init+0x268>)
 800054e:	66da      	str	r2, [r3, #108]	; 0x6c
    hfdcan->TxFifoEmptyCallback         = HAL_FDCAN_TxFifoEmptyCallback;         /* Legacy weak TxFifoEmptyCallback         */
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a8c      	ldr	r2, [pc, #560]	; (8000784 <HAL_FDCAN_Init+0x26c>)
 8000554:	671a      	str	r2, [r3, #112]	; 0x70
    hfdcan->TxBufferCompleteCallback    = HAL_FDCAN_TxBufferCompleteCallback;    /* Legacy weak TxBufferCompleteCallback    */
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a8b      	ldr	r2, [pc, #556]	; (8000788 <HAL_FDCAN_Init+0x270>)
 800055a:	675a      	str	r2, [r3, #116]	; 0x74
    hfdcan->TxBufferAbortCallback       = HAL_FDCAN_TxBufferAbortCallback;       /* Legacy weak TxBufferAbortCallback       */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a8b      	ldr	r2, [pc, #556]	; (800078c <HAL_FDCAN_Init+0x274>)
 8000560:	679a      	str	r2, [r3, #120]	; 0x78
    hfdcan->HighPriorityMessageCallback = HAL_FDCAN_HighPriorityMessageCallback; /* Legacy weak HighPriorityMessageCallback */
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a8a      	ldr	r2, [pc, #552]	; (8000790 <HAL_FDCAN_Init+0x278>)
 8000566:	67da      	str	r2, [r3, #124]	; 0x7c
    hfdcan->TimestampWraparoundCallback = HAL_FDCAN_TimestampWraparoundCallback; /* Legacy weak TimestampWraparoundCallback */
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a8a      	ldr	r2, [pc, #552]	; (8000794 <HAL_FDCAN_Init+0x27c>)
 800056c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hfdcan->TimeoutOccurredCallback     = HAL_FDCAN_TimeoutOccurredCallback;     /* Legacy weak TimeoutOccurredCallback     */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a89      	ldr	r2, [pc, #548]	; (8000798 <HAL_FDCAN_Init+0x280>)
 8000574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hfdcan->ErrorCallback               = HAL_FDCAN_ErrorCallback;               /* Legacy weak ErrorCallback               */
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a88      	ldr	r2, [pc, #544]	; (800079c <HAL_FDCAN_Init+0x284>)
 800057c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hfdcan->ErrorStatusCallback         = HAL_FDCAN_ErrorStatusCallback;         /* Legacy weak ErrorStatusCallback         */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a87      	ldr	r2, [pc, #540]	; (80007a0 <HAL_FDCAN_Init+0x288>)
 8000584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    if (hfdcan->MspInitCallback == NULL)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800058e:	2b00      	cmp	r3, #0
 8000590:	d103      	bne.n	800059a <HAL_FDCAN_Init+0x82>
    {
      hfdcan->MspInitCallback = HAL_FDCAN_MspInit;  /* Legacy weak MspInit */
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a83      	ldr	r2, [pc, #524]	; (80007a4 <HAL_FDCAN_Init+0x28c>)
 8000596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	4798      	blx	r3
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	699a      	ldr	r2, [r3, #24]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f022 0210 	bic.w	r2, r2, #16
 80005b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005b4:	f7ff fe94 	bl	80002e0 <HAL_GetTick>
 80005b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80005ba:	e012      	b.n	80005e2 <HAL_FDCAN_Init+0xca>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80005bc:	f7ff fe90 	bl	80002e0 <HAL_GetTick>
 80005c0:	4602      	mov	r2, r0
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	2b0a      	cmp	r3, #10
 80005c8:	d90b      	bls.n	80005e2 <HAL_FDCAN_Init+0xca>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ce:	f043 0201 	orr.w	r2, r3, #1
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2203      	movs	r2, #3
 80005da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e138      	b.n	8000854 <HAL_FDCAN_Init+0x33c>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0308 	and.w	r3, r3, #8
 80005ec:	2b08      	cmp	r3, #8
 80005ee:	d0e5      	beq.n	80005bc <HAL_FDCAN_Init+0xa4>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f042 0201 	orr.w	r2, r2, #1
 80005fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000600:	f7ff fe6e 	bl	80002e0 <HAL_GetTick>
 8000604:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000606:	e012      	b.n	800062e <HAL_FDCAN_Init+0x116>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000608:	f7ff fe6a 	bl	80002e0 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	2b0a      	cmp	r3, #10
 8000614:	d90b      	bls.n	800062e <HAL_FDCAN_Init+0x116>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061a:	f043 0201 	orr.w	r2, r3, #1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2203      	movs	r2, #3
 8000626:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e112      	b.n	8000854 <HAL_FDCAN_Init+0x33c>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0e5      	beq.n	8000608 <HAL_FDCAN_Init+0xf0>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f042 0202 	orr.w	r2, r2, #2
 800064a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a55      	ldr	r2, [pc, #340]	; (80007a8 <HAL_FDCAN_Init+0x290>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d103      	bne.n	800065e <HAL_FDCAN_Init+0x146>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000656:	4a55      	ldr	r2, [pc, #340]	; (80007ac <HAL_FDCAN_Init+0x294>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7c1b      	ldrb	r3, [r3, #16]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d108      	bne.n	8000678 <HAL_FDCAN_Init+0x160>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	699a      	ldr	r2, [r3, #24]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000674:	619a      	str	r2, [r3, #24]
 8000676:	e007      	b.n	8000688 <HAL_FDCAN_Init+0x170>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	699a      	ldr	r2, [r3, #24]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000686:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7c5b      	ldrb	r3, [r3, #17]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d108      	bne.n	80006a2 <HAL_FDCAN_Init+0x18a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	699a      	ldr	r2, [r3, #24]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800069e:	619a      	str	r2, [r3, #24]
 80006a0:	e007      	b.n	80006b2 <HAL_FDCAN_Init+0x19a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	699a      	ldr	r2, [r3, #24]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80006b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7c9b      	ldrb	r3, [r3, #18]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d108      	bne.n	80006cc <HAL_FDCAN_Init+0x1b4>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	699a      	ldr	r2, [r3, #24]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80006c8:	619a      	str	r2, [r3, #24]
 80006ca:	e007      	b.n	80006dc <HAL_FDCAN_Init+0x1c4>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	699a      	ldr	r2, [r3, #24]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006da:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689a      	ldr	r2, [r3, #8]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	430a      	orrs	r2, r1
 80006f0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	699a      	ldr	r2, [r3, #24]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000700:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	691a      	ldr	r2, [r3, #16]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f022 0210 	bic.w	r2, r2, #16
 8000710:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d108      	bne.n	800072c <HAL_FDCAN_Init+0x214>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f042 0204 	orr.w	r2, r2, #4
 8000728:	619a      	str	r2, [r3, #24]
 800072a:	e049      	b.n	80007c0 <HAL_FDCAN_Init+0x2a8>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d045      	beq.n	80007c0 <HAL_FDCAN_Init+0x2a8>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	2b02      	cmp	r3, #2
 800073a:	d039      	beq.n	80007b0 <HAL_FDCAN_Init+0x298>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	699a      	ldr	r2, [r3, #24]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800074a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	691a      	ldr	r2, [r3, #16]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f042 0210 	orr.w	r2, r2, #16
 800075a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	2b03      	cmp	r3, #3
 8000762:	d12d      	bne.n	80007c0 <HAL_FDCAN_Init+0x2a8>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f042 0220 	orr.w	r2, r2, #32
 8000772:	619a      	str	r2, [r3, #24]
 8000774:	e024      	b.n	80007c0 <HAL_FDCAN_Init+0x2a8>
 8000776:	bf00      	nop
 8000778:	08000fd9 	.word	0x08000fd9
 800077c:	08000fef 	.word	0x08000fef
 8000780:	08001005 	.word	0x08001005
 8000784:	0800101b 	.word	0x0800101b
 8000788:	0800102f 	.word	0x0800102f
 800078c:	08001045 	.word	0x08001045
 8000790:	08001083 	.word	0x08001083
 8000794:	0800105b 	.word	0x0800105b
 8000798:	0800106f 	.word	0x0800106f
 800079c:	08001097 	.word	0x08001097
 80007a0:	080010ab 	.word	0x080010ab
 80007a4:	080027f5 	.word	0x080027f5
 80007a8:	40006400 	.word	0x40006400
 80007ac:	40006500 	.word	0x40006500
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f042 0220 	orr.w	r2, r2, #32
 80007be:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80007d0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6a1b      	ldr	r3, [r3, #32]
 80007d6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80007d8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80007e8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80007ea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80007f4:	d115      	bne.n	8000822 <HAL_FDCAN_Init+0x30a>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000800:	3b01      	subs	r3, #1
 8000802:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000804:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	3b01      	subs	r3, #1
 800080c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800080e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	3b01      	subs	r3, #1
 8000818:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800081e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000820:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	430a      	orrs	r2, r1
 8000834:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 fc41 	bl	80010c0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2201      	movs	r2, #1
 800084e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <HAL_FDCAN_RegisterRxFifo0Callback>:
  * @param  hfdcan FDCAN handle
  * @param  pCallback pointer to the Rx Fifo 0 Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_RegisterRxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, pFDCAN_RxFifo0CallbackTypeDef pCallback)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d107      	bne.n	8000880 <HAL_FDCAN_RegisterRxFifo0Callback+0x24>
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000874:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	e012      	b.n	80008a6 <HAL_FDCAN_RegisterRxFifo0Callback+0x4a>
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b01      	cmp	r3, #1
 800088a:	d103      	bne.n	8000894 <HAL_FDCAN_RegisterRxFifo0Callback+0x38>
  {
    hfdcan->RxFifo0Callback = pCallback;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	669a      	str	r2, [r3, #104]	; 0x68
 8000892:	e007      	b.n	80008a4 <HAL_FDCAN_RegisterRxFifo0Callback+0x48>
  }
  else
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000898:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d110      	bne.n	80008e8 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2202      	movs	r2, #2
 80008ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	699a      	ldr	r2, [r3, #24]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f022 0201 	bic.w	r2, r2, #1
 80008dc:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	e006      	b.n	80008f6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ec:	f043 0204 	orr.w	r2, r3, #4
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
  }
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b02      	cmp	r3, #2
 8000918:	d12c      	bne.n	8000974 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000926:	2b00      	cmp	r3, #0
 8000928:	d007      	beq.n	800093a <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e023      	b.n	8000982 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000942:	0c1b      	lsrs	r3, r3, #16
 8000944:	f003 0303 	and.w	r3, r3, #3
 8000948:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	68b9      	ldr	r1, [r7, #8]
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f000 fc21 	bl	8001198 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2101      	movs	r1, #1
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000966:	2201      	movs	r2, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	e006      	b.n	8000982 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000978:	f043 0208 	orr.w	r2, r3, #8
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000980:	2301      	movs	r3, #1
  }
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800098c:	b480      	push	{r7}
 800098e:	b08b      	sub	sp, #44	; 0x2c
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80009a0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80009a2:	7efb      	ldrb	r3, [r7, #27]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	f040 80bc 	bne.w	8000b22 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	2b40      	cmp	r3, #64	; 0x40
 80009ae:	d121      	bne.n	80009f4 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009b8:	f003 030f 	and.w	r3, r3, #15
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e0af      	b.n	8000b30 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0303 	and.w	r3, r3, #3
 80009de:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	4613      	mov	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
 80009f2:	e020      	b.n	8000a36 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d107      	bne.n	8000a14 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e08d      	b.n	8000b30 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000a28:	69fa      	ldr	r2, [r7, #28]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d107      	bne.n	8000a5a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	0c9b      	lsrs	r3, r3, #18
 8000a50:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	e005      	b.n	8000a66 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	3304      	adds	r3, #4
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	0e1b      	lsrs	r3, r3, #24
 8000ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	0fda      	lsrs	r2, r3, #31
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	3304      	adds	r3, #4
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
 8000ad8:	e00a      	b.n	8000af0 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	441a      	add	r2, r3
 8000ae0:	6839      	ldr	r1, [r7, #0]
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	440b      	add	r3, r1
 8000ae6:	7812      	ldrb	r2, [r2, #0]
 8000ae8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8000aea:	6a3b      	ldr	r3, [r7, #32]
 8000aec:	3301      	adds	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0c1b      	lsrs	r3, r3, #16
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	461a      	mov	r2, r3
 8000afc:	6a3b      	ldr	r3, [r7, #32]
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d3eb      	bcc.n	8000ada <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	2b40      	cmp	r3, #64	; 0x40
 8000b06:	d105      	bne.n	8000b14 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	69fa      	ldr	r2, [r7, #28]
 8000b0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000b12:	e004      	b.n	8000b1e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	69fa      	ldr	r2, [r7, #28]
 8000b1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e006      	b.n	8000b30 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	f043 0208 	orr.w	r2, r3, #8
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
  }
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	372c      	adds	r7, #44	; 0x2c
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	08002a10 	.word	0x08002a10

08000b40 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2b40      	cmp	r3, #64	; 0x40
 8000b4e:	d107      	bne.n	8000b60 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b58:	f003 030f 	and.w	r3, r3, #15
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	e006      	b.n	8000b6e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000b8e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d003      	beq.n	8000b9e <HAL_FDCAN_ActivateNotification+0x22>
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	f040 80c8 	bne.w	8000d2e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d004      	beq.n	8000bba <HAL_FDCAN_ActivateNotification+0x3e>
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d03b      	beq.n	8000c32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d004      	beq.n	8000bce <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d031      	beq.n	8000c32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d004      	beq.n	8000be2 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d027      	beq.n	8000c32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d01d      	beq.n	8000c32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d013      	beq.n	8000c32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d004      	beq.n	8000c1e <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d009      	beq.n	8000c32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00c      	beq.n	8000c42 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d107      	bne.n	8000c42 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f042 0201 	orr.w	r2, r2, #1
 8000c40:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d004      	beq.n	8000c56 <HAL_FDCAN_ActivateNotification+0xda>
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d13b      	bne.n	8000cce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d131      	bne.n	8000cce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d127      	bne.n	8000cce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d004      	beq.n	8000c92 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d11d      	bne.n	8000cce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d004      	beq.n	8000ca6 <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d113      	bne.n	8000cce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d004      	beq.n	8000cba <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	f003 0320 	and.w	r3, r3, #32
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d109      	bne.n	8000cce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00c      	beq.n	8000cde <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d007      	beq.n	8000cde <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f042 0202 	orr.w	r2, r2, #2
 8000cdc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d009      	beq.n	8000cfc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d009      	beq.n	8000d1a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e006      	b.n	8000d3c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f043 0202 	orr.w	r2, r3, #2
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
  }
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	371c      	adds	r7, #28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d56:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d64:	4013      	ands	r3, r2
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d7a:	6a3a      	ldr	r2, [r7, #32]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d8a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d9e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8000da2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000db6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dba:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00e      	beq.n	8000df4 <HAL_FDCAN_IRQHandler+0xac>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d007      	beq.n	8000df4 <HAL_FDCAN_IRQHandler+0xac>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2240      	movs	r2, #64	; 0x40
 8000dea:	651a      	str	r2, [r3, #80]	; 0x50

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d01c      	beq.n	8000e3c <HAL_FDCAN_IRQHandler+0xf4>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d015      	beq.n	8000e3c <HAL_FDCAN_IRQHandler+0xf4>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e18:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e30:	651a      	str	r2, [r3, #80]	; 0x50

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e36:	6939      	ldr	r1, [r7, #16]
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d008      	beq.n	8000e54 <HAL_FDCAN_IRQHandler+0x10c>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e48:	651a      	str	r2, [r3, #80]	; 0x50

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	4798      	blx	r3
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6a3a      	ldr	r2, [r7, #32]
 8000e60:	651a      	str	r2, [r3, #80]	; 0x50

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e66:	6a39      	ldr	r1, [r7, #32]
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	4798      	blx	r3
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d008      	beq.n	8000e84 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	651a      	str	r2, [r3, #80]	; 0x50

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e7e:	69f9      	ldr	r1, [r7, #28]
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	4798      	blx	r3
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00f      	beq.n	8000eb2 <HAL_FDCAN_IRQHandler+0x16a>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d008      	beq.n	8000eb2 <HAL_FDCAN_IRQHandler+0x16a>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea8:	651a      	str	r2, [r3, #80]	; 0x50

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d01b      	beq.n	8000ef8 <HAL_FDCAN_IRQHandler+0x1b0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d014      	beq.n	8000ef8 <HAL_FDCAN_IRQHandler+0x1b0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ed6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	651a      	str	r2, [r3, #80]	; 0x50

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ef2:	68f9      	ldr	r1, [r7, #12]
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d010      	beq.n	8000f28 <HAL_FDCAN_IRQHandler+0x1e0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d009      	beq.n	8000f28 <HAL_FDCAN_IRQHandler+0x1e0>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1c:	651a      	str	r2, [r3, #80]	; 0x50

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d010      	beq.n	8000f58 <HAL_FDCAN_IRQHandler+0x210>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d009      	beq.n	8000f58 <HAL_FDCAN_IRQHandler+0x210>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f4c:	651a      	str	r2, [r3, #80]	; 0x50

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d011      	beq.n	8000f8a <HAL_FDCAN_IRQHandler+0x242>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00a      	beq.n	8000f8a <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d009      	beq.n	8000fa4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	651a      	str	r2, [r3, #80]	; 0x50

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f9e:	6979      	ldr	r1, [r7, #20]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	4798      	blx	r3
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d009      	beq.n	8000fbe <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <HAL_FDCAN_IRQHandler+0x288>
  {
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	4798      	blx	r3
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80010ca:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d103      	bne.n	80010de <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80010dc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a2c      	ldr	r2, [pc, #176]	; (8001194 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d103      	bne.n	80010f0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80010ee:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010fe:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001106:	041a      	lsls	r2, r3, #16
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001124:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112c:	061a      	lsls	r2, r3, #24
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e005      	b.n	8001172 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3304      	adds	r3, #4
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3f3      	bcc.n	8001166 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	4000a400 	.word	0x4000a400
 8001190:	40006800 	.word	0x40006800
 8001194:	40006c00 	.word	0x40006c00

08001198 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10a      	bne.n	80011c4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80011b6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80011be:	4313      	orrs	r3, r2
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	e00a      	b.n	80011da <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80011cc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80011d2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80011d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011d8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80011e4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80011ea:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80011f0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	3304      	adds	r3, #4
 8001216:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	3304      	adds	r3, #4
 8001222:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e020      	b.n	800126c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3303      	adds	r3, #3
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3302      	adds	r3, #2
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	440b      	add	r3, r1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001242:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	440b      	add	r3, r1
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001250:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	440a      	add	r2, r1
 8001258:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800125a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	3304      	adds	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3304      	adds	r3, #4
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	4a06      	ldr	r2, [pc, #24]	; (800128c <FDCAN_CopyMessageToRAM+0xf4>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	461a      	mov	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	4293      	cmp	r3, r2
 800127c:	d3d5      	bcc.n	800122a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800127e:	bf00      	nop
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	08002a10 	.word	0x08002a10

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800129e:	e15a      	b.n	8001556 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 814c 	beq.w	8001550 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d00b      	beq.n	80012d8 <HAL_GPIO_Init+0x48>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d007      	beq.n	80012d8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012cc:	2b11      	cmp	r3, #17
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b12      	cmp	r3, #18
 80012d6:	d130      	bne.n	800133a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	f003 0201 	and.w	r2, r3, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0xea>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b12      	cmp	r3, #18
 8001378:	d123      	bne.n	80013c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3208      	adds	r2, #8
 8001382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	6939      	ldr	r1, [r7, #16]
 80013be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0203 	and.w	r2, r3, #3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 80a6 	beq.w	8001550 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001404:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <HAL_GPIO_Init+0x2e4>)
 8001406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001408:	4a5a      	ldr	r2, [pc, #360]	; (8001574 <HAL_GPIO_Init+0x2e4>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6613      	str	r3, [r2, #96]	; 0x60
 8001410:	4b58      	ldr	r3, [pc, #352]	; (8001574 <HAL_GPIO_Init+0x2e4>)
 8001412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141c:	4a56      	ldr	r2, [pc, #344]	; (8001578 <HAL_GPIO_Init+0x2e8>)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	3302      	adds	r3, #2
 8001424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	220f      	movs	r2, #15
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001446:	d01f      	beq.n	8001488 <HAL_GPIO_Init+0x1f8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a4c      	ldr	r2, [pc, #304]	; (800157c <HAL_GPIO_Init+0x2ec>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d019      	beq.n	8001484 <HAL_GPIO_Init+0x1f4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a4b      	ldr	r2, [pc, #300]	; (8001580 <HAL_GPIO_Init+0x2f0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d013      	beq.n	8001480 <HAL_GPIO_Init+0x1f0>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4a      	ldr	r2, [pc, #296]	; (8001584 <HAL_GPIO_Init+0x2f4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d00d      	beq.n	800147c <HAL_GPIO_Init+0x1ec>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a49      	ldr	r2, [pc, #292]	; (8001588 <HAL_GPIO_Init+0x2f8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0x1e8>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_GPIO_Init+0x2fc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_GPIO_Init+0x1e4>
 8001470:	2305      	movs	r3, #5
 8001472:	e00a      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 8001474:	2306      	movs	r3, #6
 8001476:	e008      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 8001478:	2304      	movs	r3, #4
 800147a:	e006      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 800147c:	2303      	movs	r3, #3
 800147e:	e004      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 8001480:	2302      	movs	r3, #2
 8001482:	e002      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 8001488:	2300      	movs	r3, #0
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	f002 0203 	and.w	r2, r2, #3
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	4093      	lsls	r3, r2
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149a:	4937      	ldr	r1, [pc, #220]	; (8001578 <HAL_GPIO_Init+0x2e8>)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <HAL_GPIO_Init+0x300>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014cc:	4a30      	ldr	r2, [pc, #192]	; (8001590 <HAL_GPIO_Init+0x300>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014d2:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <HAL_GPIO_Init+0x300>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014f6:	4a26      	ldr	r2, [pc, #152]	; (8001590 <HAL_GPIO_Init+0x300>)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_GPIO_Init+0x300>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001520:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <HAL_GPIO_Init+0x300>)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_GPIO_Init+0x300>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_GPIO_Init+0x300>)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	f47f ae9d 	bne.w	80012a0 <HAL_GPIO_Init+0x10>
  }
}
 8001566:	bf00      	nop
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000
 800157c:	48000400 	.word	0x48000400
 8001580:	48000800 	.word	0x48000800
 8001584:	48000c00 	.word	0x48000c00
 8001588:	48001000 	.word	0x48001000
 800158c:	48001400 	.word	0x48001400
 8001590:	40010400 	.word	0x40010400

08001594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d141      	bne.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015a2:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ae:	d131      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b0:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015b6:	4a46      	ldr	r2, [pc, #280]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c0:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015c8:	4a41      	ldr	r2, [pc, #260]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2232      	movs	r2, #50	; 0x32
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	4a3f      	ldr	r2, [pc, #252]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0c9b      	lsrs	r3, r3, #18
 80015e2:	3301      	adds	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e6:	e002      	b.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fa:	d102      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f2      	bne.n	80015e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001602:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160e:	d158      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e057      	b.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800161a:	4a2d      	ldr	r2, [pc, #180]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001624:	e04d      	b.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800162c:	d141      	bne.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	d131      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001642:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2232      	movs	r2, #50	; 0x32
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	0c9b      	lsrs	r3, r3, #18
 800166e:	3301      	adds	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001672:	e002      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3b01      	subs	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001686:	d102      	bne.n	800168e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f2      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169a:	d112      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e011      	b.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016b0:	e007      	b.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40007000 	.word	0x40007000
 80016d4:	20000008 	.word	0x20000008
 80016d8:	431bde83 	.word	0x431bde83

080016dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e308      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d075      	beq.n	80017e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fa:	4ba3      	ldr	r3, [pc, #652]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001704:	4ba0      	ldr	r3, [pc, #640]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d102      	bne.n	800171a <HAL_RCC_OscConfig+0x3e>
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d002      	beq.n	8001720 <HAL_RCC_OscConfig+0x44>
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2b08      	cmp	r3, #8
 800171e:	d10b      	bne.n	8001738 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	4b99      	ldr	r3, [pc, #612]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d05b      	beq.n	80017e4 <HAL_RCC_OscConfig+0x108>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d157      	bne.n	80017e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e2e3      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x74>
 8001742:	4b91      	ldr	r3, [pc, #580]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a90      	ldr	r2, [pc, #576]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e01d      	b.n	800178c <HAL_RCC_OscConfig+0xb0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x98>
 800175a:	4b8b      	ldr	r3, [pc, #556]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a8a      	ldr	r2, [pc, #552]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a87      	ldr	r2, [pc, #540]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0xb0>
 8001774:	4b84      	ldr	r3, [pc, #528]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a83      	ldr	r2, [pc, #524]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a80      	ldr	r2, [pc, #512]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7fe fda4 	bl	80002e0 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7fe fda0 	bl	80002e0 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e2a8      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ae:	4b76      	ldr	r3, [pc, #472]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0xc0>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7fe fd90 	bl	80002e0 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7fe fd8c 	bl	80002e0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e294      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d6:	4b6c      	ldr	r3, [pc, #432]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0xe8>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d075      	beq.n	80018de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f2:	4b65      	ldr	r3, [pc, #404]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017fc:	4b62      	ldr	r3, [pc, #392]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d102      	bne.n	8001812 <HAL_RCC_OscConfig+0x136>
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d002      	beq.n	8001818 <HAL_RCC_OscConfig+0x13c>
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b04      	cmp	r3, #4
 8001816:	d11f      	bne.n	8001858 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001818:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_OscConfig+0x154>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e267      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b55      	ldr	r3, [pc, #340]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	4952      	ldr	r1, [pc, #328]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001844:	4b51      	ldr	r3, [pc, #324]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fcfd 	bl	8000248 <HAL_InitTick>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d043      	beq.n	80018dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e253      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d023      	beq.n	80018a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001860:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a48      	ldr	r2, [pc, #288]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7fe fd38 	bl	80002e0 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001874:	f7fe fd34 	bl	80002e0 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e23c      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	061b      	lsls	r3, r3, #24
 80018a0:	4939      	ldr	r1, [pc, #228]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
 80018a6:	e01a      	b.n	80018de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a8:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a36      	ldr	r2, [pc, #216]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80018ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7fe fd14 	bl	80002e0 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018bc:	f7fe fd10 	bl	80002e0 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e218      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x1e0>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d03c      	beq.n	8001964 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d01c      	beq.n	800192c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f8:	4a23      	ldr	r2, [pc, #140]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001902:	f7fe fced 	bl	80002e0 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190a:	f7fe fce9 	bl	80002e0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1f1      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0ef      	beq.n	800190a <HAL_RCC_OscConfig+0x22e>
 800192a:	e01b      	b.n	8001964 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7fe fcd0 	bl	80002e0 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7fe fccc 	bl	80002e0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1d4      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ef      	bne.n	8001944 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80ab 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_RCC_OscConfig+0x2b4>
 8001982:	2301      	movs	r3, #1
 8001984:	e005      	b.n	8001992 <HAL_RCC_OscConfig+0x2b6>
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	20000000 	.word	0x20000000
 8001990:	2300      	movs	r3, #0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00d      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4baf      	ldr	r3, [pc, #700]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	4aae      	ldr	r2, [pc, #696]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
 80019a2:	4bac      	ldr	r3, [pc, #688]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019ae:	2301      	movs	r3, #1
 80019b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b2:	4ba9      	ldr	r3, [pc, #676]	; (8001c58 <HAL_RCC_OscConfig+0x57c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019be:	4ba6      	ldr	r3, [pc, #664]	; (8001c58 <HAL_RCC_OscConfig+0x57c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4aa5      	ldr	r2, [pc, #660]	; (8001c58 <HAL_RCC_OscConfig+0x57c>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7fe fc89 	bl	80002e0 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d2:	f7fe fc85 	bl	80002e0 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e18d      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e4:	4b9c      	ldr	r3, [pc, #624]	; (8001c58 <HAL_RCC_OscConfig+0x57c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d108      	bne.n	8001a0a <HAL_RCC_OscConfig+0x32e>
 80019f8:	4b96      	ldr	r3, [pc, #600]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 80019fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fe:	4a95      	ldr	r2, [pc, #596]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a08:	e024      	b.n	8001a54 <HAL_RCC_OscConfig+0x378>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d110      	bne.n	8001a34 <HAL_RCC_OscConfig+0x358>
 8001a12:	4b90      	ldr	r3, [pc, #576]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a18:	4a8e      	ldr	r2, [pc, #568]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a22:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a28:	4a8a      	ldr	r2, [pc, #552]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a32:	e00f      	b.n	8001a54 <HAL_RCC_OscConfig+0x378>
 8001a34:	4b87      	ldr	r3, [pc, #540]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a86      	ldr	r2, [pc, #536]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a44:	4b83      	ldr	r3, [pc, #524]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4a:	4a82      	ldr	r2, [pc, #520]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d016      	beq.n	8001a8a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7fe fc40 	bl	80002e0 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7fe fc3c 	bl	80002e0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e142      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	4b76      	ldr	r3, [pc, #472]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ed      	beq.n	8001a64 <HAL_RCC_OscConfig+0x388>
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7fe fc29 	bl	80002e0 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7fe fc25 	bl	80002e0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e12b      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ed      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	4a64      	ldr	r2, [pc, #400]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001adc:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae2:	4a5c      	ldr	r2, [pc, #368]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7fe fbf8 	bl	80002e0 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af4:	f7fe fbf4 	bl	80002e0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e0fc      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b06:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ef      	beq.n	8001af4 <HAL_RCC_OscConfig+0x418>
 8001b14:	e01b      	b.n	8001b4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b16:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7fe fbdb 	bl	80002e0 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2e:	f7fe fbd7 	bl	80002e0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e0df      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b40:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ef      	bne.n	8001b2e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80d3 	beq.w	8001cfe <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b58:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	f000 808d 	beq.w	8001c80 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d15a      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7fe fbb1 	bl	80002e0 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b82:	f7fe fbad 	bl	80002e0 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0b5      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b94:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCC_OscConfig+0x580>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6a11      	ldr	r1, [r2, #32]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb0:	3a01      	subs	r2, #1
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bba:	0212      	lsls	r2, r2, #8
 8001bbc:	4311      	orrs	r1, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bc2:	0852      	lsrs	r2, r2, #1
 8001bc4:	3a01      	subs	r2, #1
 8001bc6:	0552      	lsls	r2, r2, #21
 8001bc8:	4311      	orrs	r1, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bce:	0852      	lsrs	r2, r2, #1
 8001bd0:	3a01      	subs	r2, #1
 8001bd2:	0652      	lsls	r2, r2, #25
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bda:	06d2      	lsls	r2, r2, #27
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	491d      	ldr	r1, [pc, #116]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7fe fb70 	bl	80002e0 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7fe fb6c 	bl	80002e0 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e074      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x528>
 8001c22:	e06c      	b.n	8001cfe <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001c42:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7fe fb48 	bl	80002e0 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c52:	e00e      	b.n	8001c72 <HAL_RCC_OscConfig+0x596>
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7fe fb3e 	bl	80002e0 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e046      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c72:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <HAL_RCC_OscConfig+0x62c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x584>
 8001c7e:	e03e      	b.n	8001cfe <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e039      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x62c>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d12c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	3b01      	subs	r3, #1
 8001cac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d123      	bne.n	8001cfa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d11b      	bne.n	8001cfa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d113      	bne.n	8001cfa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d109      	bne.n	8001cfa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e11e      	b.n	8001f62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b91      	ldr	r3, [pc, #580]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d910      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b8e      	ldr	r3, [pc, #568]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 020f 	bic.w	r2, r3, #15
 8001d3a:	498c      	ldr	r1, [pc, #560]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b8a      	ldr	r3, [pc, #552]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e106      	b.n	8001f62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d073      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d129      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d68:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0f4      	b.n	8001f62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d78:	f000 f966 	bl	8002048 <RCC_GetSysClockFreqFromPLLSource>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4a7c      	ldr	r2, [pc, #496]	; (8001f74 <HAL_RCC_ClockConfig+0x268>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d93f      	bls.n	8001e06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d86:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d033      	beq.n	8001e06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d12f      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001da6:	4b72      	ldr	r3, [pc, #456]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dae:	4a70      	ldr	r2, [pc, #448]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e024      	b.n	8001e06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc4:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0c6      	b.n	8001f62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd4:	4b66      	ldr	r3, [pc, #408]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0be      	b.n	8001f62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001de4:	f000 f8ce 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4a61      	ldr	r2, [pc, #388]	; (8001f74 <HAL_RCC_ClockConfig+0x268>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d909      	bls.n	8001e06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001df2:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dfa:	4a5d      	ldr	r2, [pc, #372]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b5a      	ldr	r3, [pc, #360]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4957      	ldr	r1, [pc, #348]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e18:	f7fe fa62 	bl	80002e0 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7fe fa5e 	bl	80002e0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e095      	b.n	8001f62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d023      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e60:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a42      	ldr	r2, [pc, #264]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001e66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e78:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e80:	4a3b      	ldr	r2, [pc, #236]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001e82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4936      	ldr	r1, [pc, #216]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b80      	cmp	r3, #128	; 0x80
 8001ea0:	d105      	bne.n	8001eae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ea2:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	4a32      	ldr	r2, [pc, #200]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eae:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d21d      	bcs.n	8001ef8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 020f 	bic.w	r2, r3, #15
 8001ec4:	4929      	ldr	r1, [pc, #164]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ecc:	f7fe fa08 	bl	80002e0 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7fe fa04 	bl	80002e0 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e03b      	b.n	8001f62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1ed      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4917      	ldr	r1, [pc, #92]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d009      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	490f      	ldr	r1, [pc, #60]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f36:	f000 f825 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <HAL_RCC_ClockConfig+0x26c>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_RCC_ClockConfig+0x270>)
 8001f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x274>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe f974 	bl	8000248 <HAL_InitTick>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	40021000 	.word	0x40021000
 8001f74:	04c4b400 	.word	0x04c4b400
 8001f78:	08002a20 	.word	0x08002a20
 8001f7c:	20000008 	.word	0x20000008
 8001f80:	20000000 	.word	0x20000000

08001f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d102      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e047      	b.n	800202c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e03e      	b.n	800202c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fae:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d136      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd8:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	4a16      	ldr	r2, [pc, #88]	; (800203c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe2:	68d2      	ldr	r2, [r2, #12]
 8001fe4:	0a12      	lsrs	r2, r2, #8
 8001fe6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
      break;
 8001ff0:	e00c      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffc:	68d2      	ldr	r2, [r2, #12]
 8001ffe:	0a12      	lsrs	r2, r2, #8
 8002000:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002004:	fb02 f303 	mul.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
      break;
 800200a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_GetSysClockFreq+0xb8>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0e5b      	lsrs	r3, r3, #25
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	3301      	adds	r3, #1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	e001      	b.n	800202c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800202c:	693b      	ldr	r3, [r7, #16]
}
 800202e:	4618      	mov	r0, r3
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	00f42400 	.word	0x00f42400
 8002044:	007a1200 	.word	0x007a1200

08002048 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d10c      	bne.n	8002086 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800206c:	4a17      	ldr	r2, [pc, #92]	; (80020cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002076:	68d2      	ldr	r2, [r2, #12]
 8002078:	0a12      	lsrs	r2, r2, #8
 800207a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
    break;
 8002084:	e00c      	b.n	80020a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002090:	68d2      	ldr	r2, [r2, #12]
 8002092:	0a12      	lsrs	r2, r2, #8
 8002094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    break;
 800209e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0e5b      	lsrs	r3, r3, #25
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020ba:	687b      	ldr	r3, [r7, #4]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	007a1200 	.word	0x007a1200
 80020d0:	00f42400 	.word	0x00f42400

080020d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020dc:	2300      	movs	r3, #0
 80020de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e0:	2300      	movs	r3, #0
 80020e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8098 	beq.w	8002222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b40      	ldr	r3, [pc, #256]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	4a3f      	ldr	r2, [pc, #252]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6593      	str	r3, [r2, #88]	; 0x58
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a39      	ldr	r2, [pc, #228]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002128:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212a:	f7fe f8d9 	bl	80002e0 <HAL_GetTick>
 800212e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002130:	e009      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002132:	f7fe f8d5 	bl	80002e0 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d902      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	74fb      	strb	r3, [r7, #19]
        break;
 8002144:	e005      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ef      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d159      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002162:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01e      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	d019      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	4a1b      	ldr	r2, [pc, #108]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe f895 	bl	80002e0 <HAL_GetTick>
 80021b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b8:	e00b      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7fe f891 	bl	80002e0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d902      	bls.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	74fb      	strb	r3, [r7, #19]
            break;
 80021d0:	e006      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ec      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10b      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f4:	4903      	ldr	r1, [pc, #12]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021fc:	e008      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	74bb      	strb	r3, [r7, #18]
 8002202:	e005      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002204:	40021000 	.word	0x40021000
 8002208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002210:	7c7b      	ldrb	r3, [r7, #17]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4baf      	ldr	r3, [pc, #700]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4aae      	ldr	r2, [pc, #696]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800222e:	4ba9      	ldr	r3, [pc, #676]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f023 0203 	bic.w	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	49a5      	ldr	r1, [pc, #660]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002250:	4ba0      	ldr	r3, [pc, #640]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f023 020c 	bic.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	499d      	ldr	r1, [pc, #628]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002272:	4b98      	ldr	r3, [pc, #608]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4994      	ldr	r1, [pc, #592]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002294:	4b8f      	ldr	r3, [pc, #572]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	498c      	ldr	r1, [pc, #560]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022b6:	4b87      	ldr	r3, [pc, #540]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	4983      	ldr	r1, [pc, #524]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d8:	4b7e      	ldr	r3, [pc, #504]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	497b      	ldr	r1, [pc, #492]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022fa:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	4972      	ldr	r1, [pc, #456]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800231c:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	496a      	ldr	r1, [pc, #424]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800233e:	4b65      	ldr	r3, [pc, #404]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	4961      	ldr	r1, [pc, #388]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002360:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002366:	f023 0203 	bic.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	4959      	ldr	r1, [pc, #356]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002382:	4b54      	ldr	r3, [pc, #336]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	4950      	ldr	r1, [pc, #320]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a4:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4948      	ldr	r1, [pc, #288]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023c2:	d105      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c4:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a42      	ldr	r2, [pc, #264]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023dc:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ea:	493a      	ldr	r1, [pc, #232]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fa:	d105      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a34      	ldr	r2, [pc, #208]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002406:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d015      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	492c      	ldr	r1, [pc, #176]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002432:	d105      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a26      	ldr	r2, [pc, #152]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800243a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	491e      	ldr	r1, [pc, #120]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800246a:	d105      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a18      	ldr	r2, [pc, #96]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002476:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4910      	ldr	r1, [pc, #64]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a2:	d105      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d018      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4902      	ldr	r1, [pc, #8]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024d2:	e001      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80024d4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024e0:	d105      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d015      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002500:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002508:	4917      	ldr	r1, [pc, #92]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002518:	d105      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4a12      	ldr	r2, [pc, #72]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	4909      	ldr	r1, [pc, #36]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002550:	d105      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800255c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800255e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000

0800256c <CANCallbackRx>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include <stdio.h>

void CANCallbackRx(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];

	while(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0))
 8002576:	e007      	b.n	8002588 <CANCallbackRx+0x1c>
	{
		if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rxHeader, &rxData) == HAL_OK)
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	f107 0210 	add.w	r2, r7, #16
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	4807      	ldr	r0, [pc, #28]	; (80025a0 <CANCallbackRx+0x34>)
 8002584:	f7fe fa02 	bl	800098c <HAL_FDCAN_GetRxMessage>
	while(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0))
 8002588:	2140      	movs	r1, #64	; 0x40
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <CANCallbackRx+0x34>)
 800258c:	f7fe fad8 	bl	8000b40 <HAL_FDCAN_GetRxFifoFillLevel>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <CANCallbackRx+0xc>
		{
			//printf("ok %d %d\r\n", rxHeader.Identifier, rxHeader.DataLength >> 4);
		}
	}
}
 8002596:	bf00      	nop
 8002598:	3738      	adds	r7, #56	; 0x38
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000002c 	.word	0x2000002c

080025a4 <main>:
  * @retval int
  */


int main(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08c      	sub	sp, #48	; 0x30
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025aa:	f7fd fe35 	bl	8000218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ae:	f000 f82f 	bl	8002610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b2:	f000 f8cb 	bl	800274c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80025b6:	f000 f883 	bl	80026c0 <MX_FDCAN1_Init>

  /* USER CODE BEGIN 2 */
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_LIST_RX_FIFO0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2107      	movs	r1, #7
 80025be:	4812      	ldr	r0, [pc, #72]	; (8002608 <main+0x64>)
 80025c0:	f7fe fadc 	bl	8000b7c <HAL_FDCAN_ActivateNotification>

  HAL_FDCAN_RegisterRxFifo0Callback(&hfdcan1, CANCallbackRx);
 80025c4:	4911      	ldr	r1, [pc, #68]	; (800260c <main+0x68>)
 80025c6:	4810      	ldr	r0, [pc, #64]	; (8002608 <main+0x64>)
 80025c8:	f7fe f948 	bl	800085c <HAL_FDCAN_RegisterRxFifo0Callback>

  HAL_FDCAN_Start(&hfdcan1);
 80025cc:	480e      	ldr	r0, [pc, #56]	; (8002608 <main+0x64>)
 80025ce:	f7fe f970 	bl	80008b2 <HAL_FDCAN_Start>

  FDCAN_TxHeaderTypeDef header;
  uint8_t data[8];

  header.Identifier = 0x123;
 80025d2:	f240 1323 	movw	r3, #291	; 0x123
 80025d6:	60fb      	str	r3, [r7, #12]
  header.IdType = FDCAN_STANDARD_ID;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
  header.TxFrameType = FDCAN_DATA_FRAME;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  header.DataLength = FDCAN_DLC_BYTES_8;
 80025e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80025e4:	61bb      	str	r3, [r7, #24]
  header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
  header.BitRateSwitch = FDCAN_BRS_OFF;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  header.FDFormat = FDCAN_CLASSIC_CAN;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header, data) != HAL_OK)
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	f107 030c 	add.w	r3, r7, #12
 80025fc:	4619      	mov	r1, r3
 80025fe:	4802      	ldr	r0, [pc, #8]	; (8002608 <main+0x64>)
 8002600:	f7fe f97f 	bl	8000902 <HAL_FDCAN_AddMessageToTxFifoQ>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002604:	e7fe      	b.n	8002604 <main+0x60>
 8002606:	bf00      	nop
 8002608:	2000002c 	.word	0x2000002c
 800260c:	0800256d 	.word	0x0800256d

08002610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0a8      	sub	sp, #160	; 0xa0
 8002614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002616:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800261a:	2238      	movs	r2, #56	; 0x38
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f9e2 	bl	80029e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002624:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002634:	463b      	mov	r3, r7
 8002636:	2254      	movs	r2, #84	; 0x54
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f9d4 	bl	80029e8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002640:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002644:	f7fe ffa6 	bl	8001594 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002648:	2302      	movs	r3, #2
 800264a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800264c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002650:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002652:	2340      	movs	r3, #64	; 0x40
 8002654:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f83b 	bl	80016dc <HAL_RCC_OscConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800266c:	f000 f886 	bl	800277c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002670:	230f      	movs	r3, #15
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002674:	2301      	movs	r3, #1
 8002676:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800267c:	2300      	movs	r3, #0
 800267e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002680:	2300      	movs	r3, #0
 8002682:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002684:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fb3e 	bl	8001d0c <HAL_RCC_ClockConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002696:	f000 f871 	bl	800277c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800269a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800269e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80026a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026a6:	463b      	mov	r3, r7
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fd13 	bl	80020d4 <HAL_RCCEx_PeriphCLKConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80026b4:	f000 f862 	bl	800277c <Error_Handler>
  }
}
 80026b8:	bf00      	nop
 80026ba:	37a0      	adds	r7, #160	; 0xa0
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <MX_FDCAN1_Init+0x84>)
 80026c6:	4a20      	ldr	r2, [pc, #128]	; (8002748 <MX_FDCAN1_Init+0x88>)
 80026c8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV8;
 80026ca:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <MX_FDCAN1_Init+0x84>)
 80026cc:	2204      	movs	r2, #4
 80026ce:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80026d0:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <MX_FDCAN1_Init+0x84>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <MX_FDCAN1_Init+0x84>)
 80026d8:	2200      	movs	r2, #0
 80026da:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <MX_FDCAN1_Init+0x84>)
 80026de:	2200      	movs	r2, #0
 80026e0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80026e2:	4b18      	ldr	r3, [pc, #96]	; (8002744 <MX_FDCAN1_Init+0x84>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <MX_FDCAN1_Init+0x84>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <MX_FDCAN1_Init+0x84>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <MX_FDCAN1_Init+0x84>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <MX_FDCAN1_Init+0x84>)
 80026fc:	2205      	movs	r2, #5
 80026fe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <MX_FDCAN1_Init+0x84>)
 8002702:	2202      	movs	r2, #2
 8002704:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <MX_FDCAN1_Init+0x84>)
 8002708:	2201      	movs	r2, #1
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <MX_FDCAN1_Init+0x84>)
 800270e:	2201      	movs	r2, #1
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <MX_FDCAN1_Init+0x84>)
 8002714:	2205      	movs	r2, #5
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <MX_FDCAN1_Init+0x84>)
 800271a:	2202      	movs	r2, #2
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_FDCAN1_Init+0x84>)
 8002720:	2200      	movs	r2, #0
 8002722:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <MX_FDCAN1_Init+0x84>)
 8002726:	2200      	movs	r2, #0
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MX_FDCAN1_Init+0x84>)
 800272c:	2200      	movs	r2, #0
 800272e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <MX_FDCAN1_Init+0x84>)
 8002732:	f7fd fef1 	bl	8000518 <HAL_FDCAN_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800273c:	f000 f81e 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2000002c 	.word	0x2000002c
 8002748:	40006400 	.word	0x40006400

0800274c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_GPIO_Init+0x2c>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	4a08      	ldr	r2, [pc, #32]	; (8002778 <MX_GPIO_Init+0x2c>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_GPIO_Init+0x2c>)
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]

}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000

0800277c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279a:	6093      	str	r3, [r2, #8]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40007000 	.word	0x40007000

080027ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_MspInit+0x44>)
 80027b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_MspInit+0x44>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6613      	str	r3, [r2, #96]	; 0x60
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_MspInit+0x44>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_MspInit+0x44>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <HAL_MspInit+0x44>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6593      	str	r3, [r2, #88]	; 0x58
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_MspInit+0x44>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80027e2:	f7ff ffd3 	bl	800278c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a20      	ldr	r2, [pc, #128]	; (8002894 <HAL_FDCAN_MspInit+0xa0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d139      	bne.n	800288a <HAL_FDCAN_MspInit+0x96>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_FDCAN_MspInit+0xa4>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <HAL_FDCAN_MspInit+0xa4>)
 800281c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002820:	6593      	str	r3, [r2, #88]	; 0x58
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_FDCAN_MspInit+0xa4>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_FDCAN_MspInit+0xa4>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_FDCAN_MspInit+0xa4>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_FDCAN_MspInit+0xa4>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002846:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002858:	2309      	movs	r3, #9
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002866:	f7fe fd13 	bl	8001290 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	2015      	movs	r0, #21
 8002870:	f7fd fe1d 	bl	80004ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002874:	2015      	movs	r0, #21
 8002876:	f7fd fe34 	bl	80004e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	2016      	movs	r0, #22
 8002880:	f7fd fe15 	bl	80004ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002884:	2016      	movs	r0, #22
 8002886:	f7fd fe2c 	bl	80004e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	; 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40006400 	.word	0x40006400
 8002898:	40021000 	.word	0x40021000

0800289c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ae:	e7fe      	b.n	80028ae <HardFault_Handler+0x4>

080028b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <MemManage_Handler+0x4>

080028b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ba:	e7fe      	b.n	80028ba <BusFault_Handler+0x4>

080028bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <UsageFault_Handler+0x4>

080028c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f0:	f7fd fce4 	bl	80002bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <FDCAN1_IT0_IRQHandler+0x10>)
 80028fe:	f7fe fa23 	bl	8000d48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2000002c 	.word	0x2000002c

0800290c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <FDCAN1_IT1_IRQHandler+0x10>)
 8002912:	f7fe fa19 	bl	8000d48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2000002c 	.word	0x2000002c

08002920 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <SystemInit+0x28>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	4a07      	ldr	r2, [pc, #28]	; (8002948 <SystemInit+0x28>)
 800292c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <SystemInit+0x28>)
 8002936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800293a:	609a      	str	r2, [r3, #8]
#endif
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800294c:	480d      	ldr	r0, [pc, #52]	; (8002984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800294e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002950:	480d      	ldr	r0, [pc, #52]	; (8002988 <LoopForever+0x6>)
  ldr r1, =_edata
 8002952:	490e      	ldr	r1, [pc, #56]	; (800298c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002954:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <LoopForever+0xe>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002958:	e002      	b.n	8002960 <LoopCopyDataInit>

0800295a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800295c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295e:	3304      	adds	r3, #4

08002960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002964:	d3f9      	bcc.n	800295a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002968:	4c0b      	ldr	r4, [pc, #44]	; (8002998 <LoopForever+0x16>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800296c:	e001      	b.n	8002972 <LoopFillZerobss>

0800296e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002970:	3204      	adds	r2, #4

08002972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002974:	d3fb      	bcc.n	800296e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002976:	f7ff ffd3 	bl	8002920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800297a:	f000 f811 	bl	80029a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800297e:	f7ff fe11 	bl	80025a4 <main>

08002982 <LoopForever>:

LoopForever:
    b LoopForever
 8002982:	e7fe      	b.n	8002982 <LoopForever>
  ldr   r0, =_estack
 8002984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800298c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002990:	08002a38 	.word	0x08002a38
  ldr r2, =_sbss
 8002994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002998:	200000c4 	.word	0x200000c4

0800299c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC1_2_IRQHandler>
	...

080029a0 <__libc_init_array>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	4e0d      	ldr	r6, [pc, #52]	; (80029d8 <__libc_init_array+0x38>)
 80029a4:	4c0d      	ldr	r4, [pc, #52]	; (80029dc <__libc_init_array+0x3c>)
 80029a6:	1ba4      	subs	r4, r4, r6
 80029a8:	10a4      	asrs	r4, r4, #2
 80029aa:	2500      	movs	r5, #0
 80029ac:	42a5      	cmp	r5, r4
 80029ae:	d109      	bne.n	80029c4 <__libc_init_array+0x24>
 80029b0:	4e0b      	ldr	r6, [pc, #44]	; (80029e0 <__libc_init_array+0x40>)
 80029b2:	4c0c      	ldr	r4, [pc, #48]	; (80029e4 <__libc_init_array+0x44>)
 80029b4:	f000 f820 	bl	80029f8 <_init>
 80029b8:	1ba4      	subs	r4, r4, r6
 80029ba:	10a4      	asrs	r4, r4, #2
 80029bc:	2500      	movs	r5, #0
 80029be:	42a5      	cmp	r5, r4
 80029c0:	d105      	bne.n	80029ce <__libc_init_array+0x2e>
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029c8:	4798      	blx	r3
 80029ca:	3501      	adds	r5, #1
 80029cc:	e7ee      	b.n	80029ac <__libc_init_array+0xc>
 80029ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029d2:	4798      	blx	r3
 80029d4:	3501      	adds	r5, #1
 80029d6:	e7f2      	b.n	80029be <__libc_init_array+0x1e>
 80029d8:	08002a30 	.word	0x08002a30
 80029dc:	08002a30 	.word	0x08002a30
 80029e0:	08002a30 	.word	0x08002a30
 80029e4:	08002a34 	.word	0x08002a34

080029e8 <memset>:
 80029e8:	4402      	add	r2, r0
 80029ea:	4603      	mov	r3, r0
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <memset+0xa>
 80029f0:	4770      	bx	lr
 80029f2:	f803 1b01 	strb.w	r1, [r3], #1
 80029f6:	e7f9      	b.n	80029ec <memset+0x4>

080029f8 <_init>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	bf00      	nop
 80029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fe:	bc08      	pop	{r3}
 8002a00:	469e      	mov	lr, r3
 8002a02:	4770      	bx	lr

08002a04 <_fini>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr
